/**
 * @file flip_32.c
 *
 * This module deals with flipping discs.
 *
 * A function is provided for each square of the board. These functions are
 * gathered into an array of functions, so that a fast access to each function
 * is allowed. The generic form of the function take as input the player and
 * the opponent UINT64s and return the flipped squares into a UINT64.
 *
 * Given the following notation:
 *  - x = square where we play,
 *  - P = player's disc pattern,
 *  - O = opponent's disc pattern,
 * the basic principle is to read into an array the result of a move. Doing
 * this is easier for a single line ; so we can use arrays of the form:
 *  - ARRAY[x][8-bits disc pattern].
 * The problem is thus to convert any line of a 64-bits disc pattern into an
 * 8-bits disc pattern. A fast way to do this is to select the right line,
 * with a bit-mask, to gather the masked-bits into a continuous set by a simple
 * multiplication and to right-shift the result to scale it into a number
 * between 0 and 255.
 * Once we get our 8-bits disc patterns,a first array (OUTFLANK) is used to
 * get the player's discs that surround the opponent discs:
 *  - outflank = OUTFLANK[x][O] & P
 * (Only inner 6-bits of the P are in interest here.)
 * The result is then used as an index to access a second array giving the
 * flipped discs according to the surrounding player's discs:
 *  - flipped = FLIPPED[x][outflank].
 * (Flipped discs fall into inner 6-bits.)
 * Finally, a precomputed array transform the inner 6-bits disc pattern back into a
 * 64-bits disc pattern, and the flipped squares for each line are gathered and
 * returned to generate moves.
 *
 * If the OUTFLANK search is in LSB to MSB direction, carry propagation 
 * can be used to determine contiguous discs.
 *
 * @date 1998 - 2012
 * @author Richard Delorme
 * @author Toshihiko Okuhara
 * @version 4.2
 */
#include "stdafx.h"

#define LODWORD(l) ((unsigned int)(l))
#define HIDWORD(l) ((unsigned int)((l)>>32))

/** outflank array (indexed with inner 6 bits) */
/* static const unsigned char OUTFLANK_0[64] = {
	0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x20,
	0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x40,
	0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x20,
	0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x80
}; */

/* static const unsigned char OUTFLANK_1[64] = {
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x80, 0x00
}; */

static const unsigned char OUTFLANK_2[64] = {
	0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x40, 0x41, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x81, 0x00, 0x00
};

static const unsigned char OUTFLANK_3[64] = {
	0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x42, 0x41, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x82, 0x81, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char OUTFLANK_4[64] = {
	0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x42, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x80, 0x80, 0x80, 0x84, 0x84, 0x82, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char OUTFLANK_5[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 0x88, 0x88, 0x88, 0x84, 0x84, 0x82, 0x81,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* static const unsigned char OUTFLANK_6[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}; */

static const unsigned char OUTFLANK_7[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01
};

/** flip array (indexed with outflank, returns inner 6 bits) */
/* static const unsigned char FLIPPED_0[129] = {
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3f
}; */

/* static const unsigned char FLIPPED_1[129] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3e
}; */

static const unsigned char FLIPPED_2[130] = {
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0c, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1c, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3c, 0x3d
};

static const unsigned char FLIPPED_3[131] = {
	0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x0b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x1b, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x3b, 0x3a
};

static const unsigned char FLIPPED_4[133] = {
	0x00, 0x07, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0x17, 0x16, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x30, 0x37, 0x36, 0x00, 0x34
};

static const unsigned char FLIPPED_5[137] = {
	0x00, 0x0f, 0x0e, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x2f, 0x2e, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x28
};

/* static const unsigned char FLIPPED_6[17] = {
	0x00, 0x1f, 0x1e, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10
}; */

/* static const unsigned char FLIPPED_7[33] = {
	0x00, 0x3f, 0x3e, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x20
}; */

/** conversion from the inner 6-bits to the A1-A8 line */
static const unsigned long long A1A8[64] = {
	0x0000000000000000ULL, 0x0000000000000100ULL, 0x0000000000010000ULL, 0x0000000000010100ULL,
	0x0000000001000000ULL, 0x0000000001000100ULL, 0x0000000001010000ULL, 0x0000000001010100ULL,
	0x0000000100000000ULL, 0x0000000100000100ULL, 0x0000000100010000ULL, 0x0000000100010100ULL,
	0x0000000101000000ULL, 0x0000000101000100ULL, 0x0000000101010000ULL, 0x0000000101010100ULL,
	0x0000010000000000ULL, 0x0000010000000100ULL, 0x0000010000010000ULL, 0x0000010000010100ULL,
	0x0000010001000000ULL, 0x0000010001000100ULL, 0x0000010001010000ULL, 0x0000010001010100ULL,
	0x0000010100000000ULL, 0x0000010100000100ULL, 0x0000010100010000ULL, 0x0000010100010100ULL,
	0x0000010101000000ULL, 0x0000010101000100ULL, 0x0000010101010000ULL, 0x0000010101010100ULL,
	0x0001000000000000ULL, 0x0001000000000100ULL, 0x0001000000010000ULL, 0x0001000000010100ULL,
	0x0001000001000000ULL, 0x0001000001000100ULL, 0x0001000001010000ULL, 0x0001000001010100ULL,
	0x0001000100000000ULL, 0x0001000100000100ULL, 0x0001000100010000ULL, 0x0001000100010100ULL,
	0x0001000101000000ULL, 0x0001000101000100ULL, 0x0001000101010000ULL, 0x0001000101010100ULL,
	0x0001010000000000ULL, 0x0001010000000100ULL, 0x0001010000010000ULL, 0x0001010000010100ULL,
	0x0001010001000000ULL, 0x0001010001000100ULL, 0x0001010001010000ULL, 0x0001010001010100ULL,
	0x0001010100000000ULL, 0x0001010100000100ULL, 0x0001010100010000ULL, 0x0001010100010100ULL,
	0x0001010101000000ULL, 0x0001010101000100ULL, 0x0001010101010000ULL, 0x0001010101010100ULL
};

/** conversion from the inner 6-bits to the B1-B8 line */
static const unsigned long long B1B8[64] = {
	0x0000000000000000ULL, 0x0000000000000200ULL, 0x0000000000020000ULL, 0x0000000000020200ULL,
	0x0000000002000000ULL, 0x0000000002000200ULL, 0x0000000002020000ULL, 0x0000000002020200ULL,
	0x0000000200000000ULL, 0x0000000200000200ULL, 0x0000000200020000ULL, 0x0000000200020200ULL,
	0x0000000202000000ULL, 0x0000000202000200ULL, 0x0000000202020000ULL, 0x0000000202020200ULL,
	0x0000020000000000ULL, 0x0000020000000200ULL, 0x0000020000020000ULL, 0x0000020000020200ULL,
	0x0000020002000000ULL, 0x0000020002000200ULL, 0x0000020002020000ULL, 0x0000020002020200ULL,
	0x0000020200000000ULL, 0x0000020200000200ULL, 0x0000020200020000ULL, 0x0000020200020200ULL,
	0x0000020202000000ULL, 0x0000020202000200ULL, 0x0000020202020000ULL, 0x0000020202020200ULL,
	0x0002000000000000ULL, 0x0002000000000200ULL, 0x0002000000020000ULL, 0x0002000000020200ULL,
	0x0002000002000000ULL, 0x0002000002000200ULL, 0x0002000002020000ULL, 0x0002000002020200ULL,
	0x0002000200000000ULL, 0x0002000200000200ULL, 0x0002000200020000ULL, 0x0002000200020200ULL,
	0x0002000202000000ULL, 0x0002000202000200ULL, 0x0002000202020000ULL, 0x0002000202020200ULL,
	0x0002020000000000ULL, 0x0002020000000200ULL, 0x0002020000020000ULL, 0x0002020000020200ULL,
	0x0002020002000000ULL, 0x0002020002000200ULL, 0x0002020002020000ULL, 0x0002020002020200ULL,
	0x0002020200000000ULL, 0x0002020200000200ULL, 0x0002020200020000ULL, 0x0002020200020200ULL,
	0x0002020202000000ULL, 0x0002020202000200ULL, 0x0002020202020000ULL, 0x0002020202020200ULL,
};

/** conversion from the inner 6-bits to the C1-C8 line */
static const unsigned long long C1C8[64] = {
	0x0000000000000000ULL, 0x0000000000000400ULL, 0x0000000000040000ULL, 0x0000000000040400ULL,
	0x0000000004000000ULL, 0x0000000004000400ULL, 0x0000000004040000ULL, 0x0000000004040400ULL,
	0x0000000400000000ULL, 0x0000000400000400ULL, 0x0000000400040000ULL, 0x0000000400040400ULL,
	0x0000000404000000ULL, 0x0000000404000400ULL, 0x0000000404040000ULL, 0x0000000404040400ULL,
	0x0000040000000000ULL, 0x0000040000000400ULL, 0x0000040000040000ULL, 0x0000040000040400ULL,
	0x0000040004000000ULL, 0x0000040004000400ULL, 0x0000040004040000ULL, 0x0000040004040400ULL,
	0x0000040400000000ULL, 0x0000040400000400ULL, 0x0000040400040000ULL, 0x0000040400040400ULL,
	0x0000040404000000ULL, 0x0000040404000400ULL, 0x0000040404040000ULL, 0x0000040404040400ULL,
	0x0004000000000000ULL, 0x0004000000000400ULL, 0x0004000000040000ULL, 0x0004000000040400ULL,
	0x0004000004000000ULL, 0x0004000004000400ULL, 0x0004000004040000ULL, 0x0004000004040400ULL,
	0x0004000400000000ULL, 0x0004000400000400ULL, 0x0004000400040000ULL, 0x0004000400040400ULL,
	0x0004000404000000ULL, 0x0004000404000400ULL, 0x0004000404040000ULL, 0x0004000404040400ULL,
	0x0004040000000000ULL, 0x0004040000000400ULL, 0x0004040000040000ULL, 0x0004040000040400ULL,
	0x0004040004000000ULL, 0x0004040004000400ULL, 0x0004040004040000ULL, 0x0004040004040400ULL,
	0x0004040400000000ULL, 0x0004040400000400ULL, 0x0004040400040000ULL, 0x0004040400040400ULL,
	0x0004040404000000ULL, 0x0004040404000400ULL, 0x0004040404040000ULL, 0x0004040404040400ULL
};

/** conversion from the inner 6-bits to the D1-D8 line */
static const unsigned long long D1D8[64] = {
	0x0000000000000000ULL, 0x0000000000000800ULL, 0x0000000000080000ULL, 0x0000000000080800ULL,
	0x0000000008000000ULL, 0x0000000008000800ULL, 0x0000000008080000ULL, 0x0000000008080800ULL,
	0x0000000800000000ULL, 0x0000000800000800ULL, 0x0000000800080000ULL, 0x0000000800080800ULL,
	0x0000000808000000ULL, 0x0000000808000800ULL, 0x0000000808080000ULL, 0x0000000808080800ULL,
	0x0000080000000000ULL, 0x0000080000000800ULL, 0x0000080000080000ULL, 0x0000080000080800ULL,
	0x0000080008000000ULL, 0x0000080008000800ULL, 0x0000080008080000ULL, 0x0000080008080800ULL,
	0x0000080800000000ULL, 0x0000080800000800ULL, 0x0000080800080000ULL, 0x0000080800080800ULL,
	0x0000080808000000ULL, 0x0000080808000800ULL, 0x0000080808080000ULL, 0x0000080808080800ULL,
	0x0008000000000000ULL, 0x0008000000000800ULL, 0x0008000000080000ULL, 0x0008000000080800ULL,
	0x0008000008000000ULL, 0x0008000008000800ULL, 0x0008000008080000ULL, 0x0008000008080800ULL,
	0x0008000800000000ULL, 0x0008000800000800ULL, 0x0008000800080000ULL, 0x0008000800080800ULL,
	0x0008000808000000ULL, 0x0008000808000800ULL, 0x0008000808080000ULL, 0x0008000808080800ULL,
	0x0008080000000000ULL, 0x0008080000000800ULL, 0x0008080000080000ULL, 0x0008080000080800ULL,
	0x0008080008000000ULL, 0x0008080008000800ULL, 0x0008080008080000ULL, 0x0008080008080800ULL,
	0x0008080800000000ULL, 0x0008080800000800ULL, 0x0008080800080000ULL, 0x0008080800080800ULL,
	0x0008080808000000ULL, 0x0008080808000800ULL, 0x0008080808080000ULL, 0x0008080808080800ULL
};

/** conversion from the inner 6-bits to the E1-E8 line */
static const unsigned long long E1E8[64] = {
	0x0000000000000000ULL, 0x0000000000001000ULL, 0x0000000000100000ULL, 0x0000000000101000ULL,
	0x0000000010000000ULL, 0x0000000010001000ULL, 0x0000000010100000ULL, 0x0000000010101000ULL,
	0x0000001000000000ULL, 0x0000001000001000ULL, 0x0000001000100000ULL, 0x0000001000101000ULL,
	0x0000001010000000ULL, 0x0000001010001000ULL, 0x0000001010100000ULL, 0x0000001010101000ULL,
	0x0000100000000000ULL, 0x0000100000001000ULL, 0x0000100000100000ULL, 0x0000100000101000ULL,
	0x0000100010000000ULL, 0x0000100010001000ULL, 0x0000100010100000ULL, 0x0000100010101000ULL,
	0x0000101000000000ULL, 0x0000101000001000ULL, 0x0000101000100000ULL, 0x0000101000101000ULL,
	0x0000101010000000ULL, 0x0000101010001000ULL, 0x0000101010100000ULL, 0x0000101010101000ULL,
	0x0010000000000000ULL, 0x0010000000001000ULL, 0x0010000000100000ULL, 0x0010000000101000ULL,
	0x0010000010000000ULL, 0x0010000010001000ULL, 0x0010000010100000ULL, 0x0010000010101000ULL,
	0x0010001000000000ULL, 0x0010001000001000ULL, 0x0010001000100000ULL, 0x0010001000101000ULL,
	0x0010001010000000ULL, 0x0010001010001000ULL, 0x0010001010100000ULL, 0x0010001010101000ULL,
	0x0010100000000000ULL, 0x0010100000001000ULL, 0x0010100000100000ULL, 0x0010100000101000ULL,
	0x0010100010000000ULL, 0x0010100010001000ULL, 0x0010100010100000ULL, 0x0010100010101000ULL,
	0x0010101000000000ULL, 0x0010101000001000ULL, 0x0010101000100000ULL, 0x0010101000101000ULL,
	0x0010101010000000ULL, 0x0010101010001000ULL, 0x0010101010100000ULL, 0x0010101010101000ULL
};

/** conversion from the inner 6-bits to the F1-F8 line */
static const unsigned long long F1F8[64] = {
	0x0000000000000000ULL, 0x0000000000002000ULL, 0x0000000000200000ULL, 0x0000000000202000ULL,
	0x0000000020000000ULL, 0x0000000020002000ULL, 0x0000000020200000ULL, 0x0000000020202000ULL,
	0x0000002000000000ULL, 0x0000002000002000ULL, 0x0000002000200000ULL, 0x0000002000202000ULL,
	0x0000002020000000ULL, 0x0000002020002000ULL, 0x0000002020200000ULL, 0x0000002020202000ULL,
	0x0000200000000000ULL, 0x0000200000002000ULL, 0x0000200000200000ULL, 0x0000200000202000ULL,
	0x0000200020000000ULL, 0x0000200020002000ULL, 0x0000200020200000ULL, 0x0000200020202000ULL,
	0x0000202000000000ULL, 0x0000202000002000ULL, 0x0000202000200000ULL, 0x0000202000202000ULL,
	0x0000202020000000ULL, 0x0000202020002000ULL, 0x0000202020200000ULL, 0x0000202020202000ULL,
	0x0020000000000000ULL, 0x0020000000002000ULL, 0x0020000000200000ULL, 0x0020000000202000ULL,
	0x0020000020000000ULL, 0x0020000020002000ULL, 0x0020000020200000ULL, 0x0020000020202000ULL,
	0x0020002000000000ULL, 0x0020002000002000ULL, 0x0020002000200000ULL, 0x0020002000202000ULL,
	0x0020002020000000ULL, 0x0020002020002000ULL, 0x0020002020200000ULL, 0x0020002020202000ULL,
	0x0020200000000000ULL, 0x0020200000002000ULL, 0x0020200000200000ULL, 0x0020200000202000ULL,
	0x0020200020000000ULL, 0x0020200020002000ULL, 0x0020200020200000ULL, 0x0020200020202000ULL,
	0x0020202000000000ULL, 0x0020202000002000ULL, 0x0020202000200000ULL, 0x0020202000202000ULL,
	0x0020202020000000ULL, 0x0020202020002000ULL, 0x0020202020200000ULL, 0x0020202020202000ULL
};

/** conversion from the inner 6-bits to the G1-G8 line */
static const unsigned long long G1G8[64] = {
	0x0000000000000000ULL, 0x0000000000004000ULL, 0x0000000000400000ULL, 0x0000000000404000ULL,
	0x0000000040000000ULL, 0x0000000040004000ULL, 0x0000000040400000ULL, 0x0000000040404000ULL,
	0x0000004000000000ULL, 0x0000004000004000ULL, 0x0000004000400000ULL, 0x0000004000404000ULL,
	0x0000004040000000ULL, 0x0000004040004000ULL, 0x0000004040400000ULL, 0x0000004040404000ULL,
	0x0000400000000000ULL, 0x0000400000004000ULL, 0x0000400000400000ULL, 0x0000400000404000ULL,
	0x0000400040000000ULL, 0x0000400040004000ULL, 0x0000400040400000ULL, 0x0000400040404000ULL,
	0x0000404000000000ULL, 0x0000404000004000ULL, 0x0000404000400000ULL, 0x0000404000404000ULL,
	0x0000404040000000ULL, 0x0000404040004000ULL, 0x0000404040400000ULL, 0x0000404040404000ULL,
	0x0040000000000000ULL, 0x0040000000004000ULL, 0x0040000000400000ULL, 0x0040000000404000ULL,
	0x0040000040000000ULL, 0x0040000040004000ULL, 0x0040000040400000ULL, 0x0040000040404000ULL,
	0x0040004000000000ULL, 0x0040004000004000ULL, 0x0040004000400000ULL, 0x0040004000404000ULL,
	0x0040004040000000ULL, 0x0040004040004000ULL, 0x0040004040400000ULL, 0x0040004040404000ULL,
	0x0040400000000000ULL, 0x0040400000004000ULL, 0x0040400000400000ULL, 0x0040400000404000ULL,
	0x0040400040000000ULL, 0x0040400040004000ULL, 0x0040400040400000ULL, 0x0040400040404000ULL,
	0x0040404000000000ULL, 0x0040404000004000ULL, 0x0040404000400000ULL, 0x0040404000404000ULL,
	0x0040404040000000ULL, 0x0040404040004000ULL, 0x0040404040400000ULL, 0x0040404040404000ULL
};

/** conversion from the inner 6-bits to the H1-H8 line */
static const unsigned long long H1H8[64] = {
	0x0000000000000000ULL, 0x0000000000008000ULL, 0x0000000000800000ULL, 0x0000000000808000ULL,
	0x0000000080000000ULL, 0x0000000080008000ULL, 0x0000000080800000ULL, 0x0000000080808000ULL,
	0x0000008000000000ULL, 0x0000008000008000ULL, 0x0000008000800000ULL, 0x0000008000808000ULL,
	0x0000008080000000ULL, 0x0000008080008000ULL, 0x0000008080800000ULL, 0x0000008080808000ULL,
	0x0000800000000000ULL, 0x0000800000008000ULL, 0x0000800000800000ULL, 0x0000800000808000ULL,
	0x0000800080000000ULL, 0x0000800080008000ULL, 0x0000800080800000ULL, 0x0000800080808000ULL,
	0x0000808000000000ULL, 0x0000808000008000ULL, 0x0000808000800000ULL, 0x0000808000808000ULL,
	0x0000808080000000ULL, 0x0000808080008000ULL, 0x0000808080800000ULL, 0x0000808080808000ULL,
	0x0080000000000000ULL, 0x0080000000008000ULL, 0x0080000000800000ULL, 0x0080000000808000ULL,
	0x0080000080000000ULL, 0x0080000080008000ULL, 0x0080000080800000ULL, 0x0080000080808000ULL,
	0x0080008000000000ULL, 0x0080008000008000ULL, 0x0080008000800000ULL, 0x0080008000808000ULL,
	0x0080008080000000ULL, 0x0080008080008000ULL, 0x0080008080800000ULL, 0x0080008080808000ULL,
	0x0080800000000000ULL, 0x0080800000008000ULL, 0x0080800000800000ULL, 0x0080800000808000ULL,
	0x0080800080000000ULL, 0x0080800080008000ULL, 0x0080800080800000ULL, 0x0080800080808000ULL,
	0x0080808000000000ULL, 0x0080808000008000ULL, 0x0080808000800000ULL, 0x0080808000808000ULL,
	0x0080808080000000ULL, 0x0080808080008000ULL, 0x0080808080800000ULL, 0x0080808080808000ULL
};

/** conversion from the inner 6-bits to the D1-A4 line */
/* static const unsigned long long D1A4[4] = {
	0x0000000000000000ULL, 0x0000000000020000ULL, 0x0000000000000400ULL, 0x0000000000020400ULL
}; */

/** conversion from the inner 6-bits to the E1-A5 line */
/* static const unsigned long long E1A5[8] = {
	0x0000000000000000ULL, 0x0000000002000000ULL, 0x0000000000040000ULL, 0x0000000002040000ULL,
	0x0000000000000800ULL, 0x0000000002000800ULL, 0x0000000000040800ULL, 0x0000000002040800ULL
}; */

/** conversion from the inner 6-bits to the F1-A6 line */
static const unsigned long long F1A6[16] = {
	0x0000000000000000ULL, 0x0000000200000000ULL, 0x0000000004000000ULL, 0x0000000204000000ULL,
	0x0000000000080000ULL, 0x0000000200080000ULL, 0x0000000004080000ULL, 0x0000000204080000ULL,
	0x0000000000001000ULL, 0x0000000200001000ULL, 0x0000000004001000ULL, 0x0000000204001000ULL,
	0x0000000000081000ULL, 0x0000000200081000ULL, 0x0000000004081000ULL, 0x0000000204081000ULL
};

/** conversion from the inner 6-bits to the G1-A7 line */
static const unsigned long long G1A7[32] = {
	0x0000000000000000ULL, 0x0000020000000000ULL, 0x0000000400000000ULL, 0x0000020400000000ULL,
	0x0000000008000000ULL, 0x0000020008000000ULL, 0x0000000408000000ULL, 0x0000020408000000ULL,
	0x0000000000100000ULL, 0x0000020000100000ULL, 0x0000000400100000ULL, 0x0000020400100000ULL,
	0x0000000008100000ULL, 0x0000020008100000ULL, 0x0000000408100000ULL, 0x0000020408100000ULL,
	0x0000000000002000ULL, 0x0000020000002000ULL, 0x0000000400002000ULL, 0x0000020400002000ULL,
	0x0000000008002000ULL, 0x0000020008002000ULL, 0x0000000408002000ULL, 0x0000020408002000ULL,
	0x0000000000102000ULL, 0x0000020000102000ULL, 0x0000000400102000ULL, 0x0000020400102000ULL,
	0x0000000008102000ULL, 0x0000020008102000ULL, 0x0000000408102000ULL, 0x0000020408102000ULL
};

/** conversion from the inner 6-bits to the H1-A8 line */
static const unsigned long long H1A8[64] = {
	0x0000000000000000ULL, 0x0002000000000000ULL, 0x0000040000000000ULL, 0x0002040000000000ULL,
	0x0000000800000000ULL, 0x0002000800000000ULL, 0x0000040800000000ULL, 0x0002040800000000ULL,
	0x0000000010000000ULL, 0x0002000010000000ULL, 0x0000040010000000ULL, 0x0002040010000000ULL,
	0x0000000810000000ULL, 0x0002000810000000ULL, 0x0000040810000000ULL, 0x0002040810000000ULL,
	0x0000000000200000ULL, 0x0002000000200000ULL, 0x0000040000200000ULL, 0x0002040000200000ULL,
	0x0000000800200000ULL, 0x0002000800200000ULL, 0x0000040800200000ULL, 0x0002040800200000ULL,
	0x0000000010200000ULL, 0x0002000010200000ULL, 0x0000040010200000ULL, 0x0002040010200000ULL,
	0x0000000810200000ULL, 0x0002000810200000ULL, 0x0000040810200000ULL, 0x0002040810200000ULL,
	0x0000000000004000ULL, 0x0002000000004000ULL, 0x0000040000004000ULL, 0x0002040000004000ULL,
	0x0000000800004000ULL, 0x0002000800004000ULL, 0x0000040800004000ULL, 0x0002040800004000ULL,
	0x0000000010004000ULL, 0x0002000010004000ULL, 0x0000040010004000ULL, 0x0002040010004000ULL,
	0x0000000810004000ULL, 0x0002000810004000ULL, 0x0000040810004000ULL, 0x0002040810004000ULL,
	0x0000000000204000ULL, 0x0002000000204000ULL, 0x0000040000204000ULL, 0x0002040000204000ULL,
	0x0000000800204000ULL, 0x0002000800204000ULL, 0x0000040800204000ULL, 0x0002040800204000ULL,
	0x0000000010204000ULL, 0x0002000010204000ULL, 0x0000040010204000ULL, 0x0002040010204000ULL,
	0x0000000810204000ULL, 0x0002000810204000ULL, 0x0000040810204000ULL, 0x0002040810204000ULL
};

/** conversion from the inner 5-bits to the H2-B8 line */
static const unsigned long long H2B8[32] = {
	0x0000000000000000ULL, 0x0004000000000000ULL, 0x0000080000000000ULL, 0x0004080000000000ULL,
	0x0000001000000000ULL, 0x0004001000000000ULL, 0x0000081000000000ULL, 0x0004081000000000ULL,
	0x0000000020000000ULL, 0x0004000020000000ULL, 0x0000080020000000ULL, 0x0004080020000000ULL,
	0x0000001020000000ULL, 0x0004001020000000ULL, 0x0000081020000000ULL, 0x0004081020000000ULL,
	0x0000000000400000ULL, 0x0004000000400000ULL, 0x0000080000400000ULL, 0x0004080000400000ULL,
	0x0000001000400000ULL, 0x0004001000400000ULL, 0x0000081000400000ULL, 0x0004081000400000ULL,
	0x0000000020400000ULL, 0x0004000020400000ULL, 0x0000080020400000ULL, 0x0004080020400000ULL,
	0x0000001020400000ULL, 0x0004001020400000ULL, 0x0000081020400000ULL, 0x0004081020400000ULL
};

/** conversion from the inner 4-bits to the H3-C8 line */
static const unsigned long long H3C8[16] = {
	0x0000000000000000ULL, 0x0008000000000000ULL, 0x0000100000000000ULL, 0x0008100000000000ULL,
	0x0000002000000000ULL, 0x0008002000000000ULL, 0x0000102000000000ULL, 0x0008102000000000ULL,
	0x0000000040000000ULL, 0x0008000040000000ULL, 0x0000100040000000ULL, 0x0008100040000000ULL,
	0x0000002040000000ULL, 0x0008002040000000ULL, 0x0000102040000000ULL, 0x0008102040000000ULL,
};

/** conversion from the inner 3-bits to the H4-D8 line */
/* static const unsigned long long H4D8[8] = {
	0x0000000000000000ULL, 0x0010000000000000ULL, 0x0000200000000000ULL, 0x0010200000000000ULL,
	0x0000004000000000ULL, 0x0010004000000000ULL, 0x0000204000000000ULL, 0x0010204000000000ULL
}; */

/** conversion from the inner 2-bits to the H5-E8 line */
/* static const unsigned long long H5E8[4] = {
	0x0000000000000000ULL, 0x0020000000000000ULL, 0x0000400000000000ULL, 0x0020400000000000ULL
}; */

/** conversion from the inner 6-bits to the A5-D8 line */
/* static const unsigned long long A5D8[4] = {
	0x0000000000000000ULL, 0x0000020000000000ULL, 0x0004000000000000ULL, 0x0004020000000000ULL
}; */

/** conversion from the inner 6-bits to the A4-E8 line */
/* static const unsigned long long A4E8[8] = {
	0x0000000000000000ULL, 0x0000000200000000ULL, 0x0000040000000000ULL, 0x0000040200000000ULL,
	0x0008000000000000ULL, 0x0008000200000000ULL, 0x0008040000000000ULL, 0x0008040200000000ULL
}; */

/** conversion from the inner 6-bits to the A3-F8 line */
static const unsigned long long A3F8[16] = {
	0x0000000000000000ULL, 0x0000000002000000ULL, 0x0000000400000000ULL, 0x0000000402000000ULL,
	0x0000080000000000ULL, 0x0000080002000000ULL, 0x0000080400000000ULL, 0x0000080402000000ULL,
	0x0010000000000000ULL, 0x0010000002000000ULL, 0x0010000400000000ULL, 0x0010000402000000ULL,
	0x0010080000000000ULL, 0x0010080002000000ULL, 0x0010080400000000ULL, 0x0010080402000000ULL
};

/** conversion from the inner 6-bits to the A2-G8 line */
static const unsigned long long A2G8[32] = {
	0x0000000000000000ULL, 0x0000000000020000ULL, 0x0000000004000000ULL, 0x0000000004020000ULL,
	0x0000000800000000ULL, 0x0000000800020000ULL, 0x0000000804000000ULL, 0x0000000804020000ULL,
	0x0000100000000000ULL, 0x0000100000020000ULL, 0x0000100004000000ULL, 0x0000100004020000ULL,
	0x0000100800000000ULL, 0x0000100800020000ULL, 0x0000100804000000ULL, 0x0000100804020000ULL,
	0x0020000000000000ULL, 0x0020000000020000ULL, 0x0020000004000000ULL, 0x0020000004020000ULL,
	0x0020000800000000ULL, 0x0020000800020000ULL, 0x0020000804000000ULL, 0x0020000804020000ULL,
	0x0020100000000000ULL, 0x0020100000020000ULL, 0x0020100004000000ULL, 0x0020100004020000ULL,
	0x0020100800000000ULL, 0x0020100800020000ULL, 0x0020100804000000ULL, 0x0020100804020000ULL
};

/** conversion from the inner 6-bits to the A1-H8 line */
static const unsigned long long A1H8[64] = {
	0x0000000000000000ULL, 0x0000000000000200ULL, 0x0000000000040000ULL, 0x0000000000040200ULL,
	0x0000000008000000ULL, 0x0000000008000200ULL, 0x0000000008040000ULL, 0x0000000008040200ULL,
	0x0000001000000000ULL, 0x0000001000000200ULL, 0x0000001000040000ULL, 0x0000001000040200ULL,
	0x0000001008000000ULL, 0x0000001008000200ULL, 0x0000001008040000ULL, 0x0000001008040200ULL,
	0x0000200000000000ULL, 0x0000200000000200ULL, 0x0000200000040000ULL, 0x0000200000040200ULL,
	0x0000200008000000ULL, 0x0000200008000200ULL, 0x0000200008040000ULL, 0x0000200008040200ULL,
	0x0000201000000000ULL, 0x0000201000000200ULL, 0x0000201000040000ULL, 0x0000201000040200ULL,
	0x0000201008000000ULL, 0x0000201008000200ULL, 0x0000201008040000ULL, 0x0000201008040200ULL,
	0x0040000000000000ULL, 0x0040000000000200ULL, 0x0040000000040000ULL, 0x0040000000040200ULL,
	0x0040000008000000ULL, 0x0040000008000200ULL, 0x0040000008040000ULL, 0x0040000008040200ULL,
	0x0040001000000000ULL, 0x0040001000000200ULL, 0x0040001000040000ULL, 0x0040001000040200ULL,
	0x0040001008000000ULL, 0x0040001008000200ULL, 0x0040001008040000ULL, 0x0040001008040200ULL,
	0x0040200000000000ULL, 0x0040200000000200ULL, 0x0040200000040000ULL, 0x0040200000040200ULL,
	0x0040200008000000ULL, 0x0040200008000200ULL, 0x0040200008040000ULL, 0x0040200008040200ULL,
	0x0040201000000000ULL, 0x0040201000000200ULL, 0x0040201000040000ULL, 0x0040201000040200ULL,
	0x0040201008000000ULL, 0x0040201008000200ULL, 0x0040201008040000ULL, 0x0040201008040200ULL
};

/** conversion from the inner 5-bits to the B1-H7 line */
static const unsigned long long B1H7[32] = {
	0x0000000000000000ULL, 0x0000000000000400ULL, 0x0000000000080000ULL, 0x0000000000080400ULL,
	0x0000000010000000ULL, 0x0000000010000400ULL, 0x0000000010080000ULL, 0x0000000010080400ULL,
	0x0000002000000000ULL, 0x0000002000000400ULL, 0x0000002000080000ULL, 0x0000002000080400ULL,
	0x0000002010000000ULL, 0x0000002010000400ULL, 0x0000002010080000ULL, 0x0000002010080400ULL,
	0x0000400000000000ULL, 0x0000400000000400ULL, 0x0000400000080000ULL, 0x0000400000080400ULL,
	0x0000400010000000ULL, 0x0000400010000400ULL, 0x0000400010080000ULL, 0x0000400010080400ULL,
	0x0000402000000000ULL, 0x0000402000000400ULL, 0x0000402000080000ULL, 0x0000402000080400ULL,
	0x0000402010000000ULL, 0x0000402010000400ULL, 0x0000402010080000ULL, 0x0000402010080400ULL
};

/** conversion from the inner 4-bits to the C1-H6 line */
static const unsigned long long C1H6[16] = {
	0x0000000000000000ULL, 0x0000000000000800ULL, 0x0000000000100000ULL, 0x0000000000100800ULL, 
	0x0000000020000000ULL, 0x0000000020000800ULL, 0x0000000020100000ULL, 0x0000000020100800ULL, 
	0x0000004000000000ULL, 0x0000004000000800ULL, 0x0000004000100000ULL, 0x0000004000100800ULL, 
	0x0000004020000000ULL, 0x0000004020000800ULL, 0x0000004020100000ULL, 0x0000004020100800ULL
};

/** conversion from the inner 3-bits to the D1-H5 line */
/* static const unsigned long long D1H5[8] = {
	0x0000000000000000ULL, 0x0000000000001000ULL, 0x0000000000200000ULL, 0x0000000000201000ULL, 
	0x0000000040000000ULL, 0x0000000040001000ULL, 0x0000000040200000ULL, 0x0000000040201000ULL
}; */

/** conversion from the inner 2-bits to the E1-H4 line */
/* static const unsigned long long E1H4[4] = {
	0x0000000000000000ULL, 0x0000000000002000ULL, 0x0000000000400000ULL, 0x0000000000402000ULL
}; */

/** conversion from the inner 6-bits to the A5-D8-H4 line (upper 32 bit) */
static const unsigned int A5D8H4[64] = {
	0x00000000u, 0x00000200u, 0x00040000u, 0x00040200u,
	0x08000000u, 0x08000200u, 0x08040000u, 0x08040200u,
	0x00100000u, 0x00100200u, 0x00140000u, 0x00140200u,
	0x08100000u, 0x08100200u, 0x08140000u, 0x08140200u,
	0x00002000u, 0x00002200u, 0x00042000u, 0x00042200u,
	0x08002000u, 0x08002200u, 0x08042000u, 0x08042200u,
	0x00102000u, 0x00102200u, 0x00142000u, 0x00142200u,
	0x08102000u, 0x08102200u, 0x08142000u, 0x08142200u,
	0x00000040u, 0x00000240u, 0x00040040u, 0x00040240u,
	0x08000040u, 0x08000240u, 0x08040040u, 0x08040240u,
	0x00100040u, 0x00100240u, 0x00140040u, 0x00140240u,
	0x08100040u, 0x08100240u, 0x08140040u, 0x08140240u,
	0x00002040u, 0x00002240u, 0x00042040u, 0x00042240u,
	0x08002040u, 0x08002240u, 0x08042040u, 0x08042240u,
	0x00102040u, 0x00102240u, 0x00142040u, 0x00142240u,
	0x08102040u, 0x08102240u, 0x08142040u, 0x08142240u
};

/** conversion from the inner 6-bits to the A4-E8-H5 line (upper 32 bit) */
static const unsigned int A4E8H5[64] = {
	0x00000000u, 0x00000002u, 0x00000400u, 0x00000402u,
	0x00080000u, 0x00080002u, 0x00080400u, 0x00080402u,
	0x10000000u, 0x10000002u, 0x10000400u, 0x10000402u,
	0x10080000u, 0x10080002u, 0x10080400u, 0x10080402u,
	0x00200000u, 0x00200002u, 0x00200400u, 0x00200402u,
	0x00280000u, 0x00280002u, 0x00280400u, 0x00280402u,
	0x10200000u, 0x10200002u, 0x10200400u, 0x10200402u,
	0x10280000u, 0x10280002u, 0x10280400u, 0x10280402u,
	0x00004000u, 0x00004002u, 0x00004400u, 0x00004402u,
	0x00084000u, 0x00084002u, 0x00084400u, 0x00084402u,
	0x10004000u, 0x10004002u, 0x10004400u, 0x10004402u,
	0x10084000u, 0x10084002u, 0x10084400u, 0x10084402u,
	0x00204000u, 0x00204002u, 0x00204400u, 0x00204402u,
	0x00284000u, 0x00284002u, 0x00284400u, 0x00284402u,
	0x10204000u, 0x10204002u, 0x10204400u, 0x10204402u,
	0x10284000u, 0x10284002u, 0x10284400u, 0x10284402u
};


/**
 * Compute flipped discs when playing on square A1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_A1(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d9;

	outflank_v = ((O | ~0x0101010101010100ULL) + 0x0000000000000100ULL) & P & 0x0101010101010000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0001010101010100ULL;

	outflank_h = ((O & 0x7e) + 0x02) & P;
	flipped |= (outflank_h - (unsigned int) (outflank_h != 0)) & 0x7e;

	outflank_d9 = ((O | ~0x8040201008040200ULL) + 0x0000000000000200ULL) & P & 0x8040201008040000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0040201008040200ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square B1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_B1(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d9;

	outflank_v = ((O | ~0x0202020202020200ULL) + 0x0000000000000200ULL) & P & 0x0202020202020000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0002020202020200ULL;

	outflank_h = ((O & 0x7c) + 0x04) & P;
	flipped |= (outflank_h - (unsigned int) (outflank_h != 0)) & 0x7c;

	outflank_d9 = ((O | ~0x0080402010080400ULL) + 0x0000000000000400ULL) & P & 0x0080402010080000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0000402010080400ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square C1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_C1(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d9;

	outflank_v = ((O | ~0x0404040404040400ULL) + 0x0000000000000400ULL) & P & 0x0404040404040000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0004040404040400ULL;

	outflank_h = OUTFLANK_2[(O >> 1) & 0x3f] & P;
	flipped |= (FLIPPED_2[outflank_h] << 1);

	flipped |= (((unsigned int) P >> 7) & 0x00000200u & (unsigned int) O);

	outflank_d9 = ((O | ~0x0000804020100800ULL) + 0x0000000000000800ULL) & P & 0x0000804020100000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0000004020100800ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square D1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_D1(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_d7;
	unsigned long long flipped, outflank_v, outflank_d9;

	outflank_v = ((O | ~0x0808080808080800ULL) + 0x0000000000000800ULL) & P & 0x0808080808080000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0008080808080800ULL;

	outflank_h = OUTFLANK_3[(O >> 1) & 0x3f] & P;
	flipped |= (FLIPPED_3[outflank_h] << 1);

	outflank_d7 = ((O | ~0x01020400u) + 0x00000400u) & P & 0x01020000u;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x00020400u;

	outflank_d9 = ((O | ~0x0000008040201000ULL) + 0x0000000000001000ULL) & P & 0x0000008040200000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0000000040201000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square E1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_E1(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_d9;
	unsigned long long flipped, outflank_v, outflank_d7;

	outflank_v = ((O | ~0x1010101010101000ULL) + 0x0000000000001000ULL) & P & 0x1010101010100000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0010101010101000ULL;

	outflank_h = OUTFLANK_4[(O >> 1) & 0x3f] & P;
	flipped |= (FLIPPED_4[outflank_h] << 1);

	outflank_d7 = ((O | ~0x0000000102040800ULL) + 0x0000000000000800ULL) & P & 0x0000000102040000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0000000002040800ULL;

	outflank_d9 = ((O | ~0x80402000u) + 0x00002000u) & P & 0x80400000u;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x00402000u;

	return flipped;
}

/**
 * Compute flipped discs when playing on square F1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_F1(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d7;

	outflank_v = ((O | ~0x2020202020202000ULL) + 0x0000000000002000ULL) & P & 0x2020202020200000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0020202020202000ULL;

	outflank_h = OUTFLANK_5[(O >> 1) & 0x3f] & P;
	flipped |= (FLIPPED_5[outflank_h] << 1);

	outflank_d7 = ((O | ~0x0000010204081000ULL) + 0x0000000000001000ULL) & P & 0x0000010204080000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0000000204081000ULL;

	flipped |= (((unsigned int) P >> 9) & 0x00004000u & (unsigned int) O);

	return flipped;
}

/**
 * Compute flipped discs when playing on square G1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_G1(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d7;

	outflank_v = ((O | ~0x4040404040404000ULL) + 0x0000000000004000ULL) & P & 0x4040404040400000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0040404040404000ULL;

	outflank_h = OUTFLANK_7[O & 0x3e] & ((unsigned int) P << 1);
	flipped |= ((-outflank_h) & 0x3e) << 0;

	outflank_d7 = ((O | ~0x0001020408102000ULL) + 0x0000000000002000ULL) & P & 0x0001020408100000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0000020408102000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square H1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_H1(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d7;

	outflank_v = ((O | ~0x8080808080808000ULL) + 0x0000000000008000ULL) & P & 0x8080808080800000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0080808080808000ULL;

	outflank_h = OUTFLANK_7[(O >> 1) & 0x3f] & (unsigned int) P;
	flipped |= ((-outflank_h) & 0x3f) << 1;

	outflank_d7 = ((O | ~0x0102040810204000ULL) + 0x0000000000004000ULL) & P & 0x0102040810200000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0002040810204000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square A2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_A2(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d9;

	outflank_v = ((O | ~0x0101010101010000ULL) + 0x0000000000010000ULL) & P & 0x0101010101000000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0001010101010000ULL;

	outflank_h = ((O & 0x00007e00u) + 0x00000200u) & P;
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x00007e00u;

	outflank_d9 = ((O | ~0x4020100804020000ULL) + 0x0000000000020000ULL) & P & 0x4020100804000000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0020100804020000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square B2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_B2(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d9;

	outflank_v = ((O | ~0x0202020202020000ULL) + 0x0000000000020000ULL) & P & 0x0202020202000000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0002020202020000ULL;

	outflank_h = ((O & 0x00007c00u) + 0x00000400u) & P;
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x00007c00u;

	outflank_d9 = ((O | ~0x8040201008040000ULL) + 0x0000000000040000ULL) & P & 0x8040201008000000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0040201008040000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square C2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_C2(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d9;

	outflank_v = ((O | ~0x0404040404040000ULL) + 0x0000000000040000ULL) & P & 0x0404040404000000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0004040404040000ULL;

	outflank_h = OUTFLANK_2[(O >> 9) & 0x3f] & ((unsigned int) P >> 8);
	flipped |= (FLIPPED_2[outflank_h] << 9);

	flipped |= (((unsigned int) P >> 7) & 0x00020000u & (unsigned int) O);

	outflank_d9 = ((O | ~0x0080402010080000ULL) + 0x0000000000080000ULL) & P & 0x0080402010080000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0000402010080000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square D2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_D2(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d7, outflank_d9;

	outflank_v = ((O | ~0x0808080808080000ULL) + 0x0000000000080000ULL) & P & 0x0808080808000000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0008080808080000ULL;

	outflank_h = OUTFLANK_3[(O >> 9) & 0x3f] & ((unsigned int) P >> 8);
	flipped |= (FLIPPED_3[outflank_h] << 9);

	outflank_d7 = ((O | ~0x0000000102040000ULL) + 0x0000000000040000ULL) & P & 0x0000000102000000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0000000002040000ULL;

	outflank_d9 = ((O | ~0x0000804020100000ULL) + 0x0000000000100000ULL) & P & 0x0000804020000000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0000004020100000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square E2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_E2(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d7, outflank_d9;

	outflank_v = ((O | ~0x1010101010100000ULL) + 0x0000000000100000ULL) & P & 0x1010101010000000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0010101010100000ULL;

	outflank_h = OUTFLANK_4[(O >> 9) & 0x3f] & ((unsigned int) P >> 8);
	flipped |= (FLIPPED_4[outflank_h] << 9);

	outflank_d7 = ((O | ~0x0000010204080000ULL) + 0x0000000000080000ULL) & P & 0x0000010204000000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0000000204080000ULL;

	outflank_d9 = ((O | ~0x0000008040200000ULL) + 0x0000000000200000ULL) & P & 0x0000008040000000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0000000040200000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square F2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_F2(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d7;

	outflank_v = ((O | ~0x2020202020200000ULL) + 0x0000000000200000ULL) & P & 0x2020202020000000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0020202020200000ULL;

	outflank_h = OUTFLANK_5[(O >> 9) & 0x3f] & ((unsigned int) P >> 8);
	flipped |= (FLIPPED_5[outflank_h] << 9);

	outflank_d7 = ((O | ~0x0001020408100000ULL) + 0x0000000000100000ULL) & P & 0x0001020408000000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0000020408100000ULL;

	flipped |= (((unsigned int) P >> 9) & 0x00400000u & (unsigned int) O);

	return flipped;
}

/**
 * Compute flipped discs when playing on square G2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_G2(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d7;

	outflank_v = ((O | ~0x4040404040400000ULL) + 0x0000000000400000ULL) & P & 0x4040404040000000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0040404040400000ULL;

	outflank_h = OUTFLANK_7[(O >> 8) & 0x3e] & ((unsigned int) P >> 7);
	flipped |= ((-outflank_h) & 0x3e) << 8;

	outflank_d7 = ((O | ~0x0102040810200000ULL) + 0x0000000000200000ULL) & P & 0x0102040810000000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0002040810200000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square H2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_H2(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h;
	unsigned long long flipped, outflank_v, outflank_d7;

	outflank_v = ((O | ~0x8080808080800000ULL) + 0x0000000000800000ULL) & P & 0x8080808080000000ULL;
	flipped = (outflank_v - (unsigned int) (outflank_v != 0)) & 0x0080808080800000ULL;

	outflank_h = OUTFLANK_7[(O >> 9) & 0x3f] & ((unsigned int) P >> 8);
	flipped |= ((-outflank_h) & 0x3f) << 9;

	outflank_d7 = ((O | ~0x0204081020400000ULL) + 0x0000000000400000ULL) & P & 0x0204081020000000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0004081020400000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square A3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_A3(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_v, outflank_h;
	unsigned long long flipped, outflank_d9;

	outflank_v = OUTFLANK_2[(((LODWORD(O) & 0x01010100u) + ((HIDWORD(O) & 0x00010101u) << 4)) * 0x01020408u) >> 25]
		& ((((LODWORD(P) & 0x01010101u) + ((HIDWORD(P) & 0x01010101u) << 4)) * 0x01020408u) >> 24);
	flipped = A1A8[FLIPPED_2[outflank_v]];

	outflank_h = ((O & 0x007e0000u) + 0x00020000u) & P;
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x007e0000u;

	flipped |= (((unsigned int) P << 7) & 0x00000200u & (unsigned int) O);

	outflank_d9 = ((O | ~0x2010080402000000ULL) + 0x0000000002000000ULL) & P & 0x2010080400000000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0010080402000000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square B3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_B3(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v;
	unsigned long long flipped, outflank_d9;

	outflank_v = OUTFLANK_2[(((LODWORD(O) & 0x02020200u) + ((HIDWORD(O) & 0x00020202u) << 4)) * 0x00810204u) >> 25]
		& ((((LODWORD(P) & 0x02020202u) + ((HIDWORD(P) & 0x02020202u) << 4)) * 0x00810204u) >> 24);
	flipped = B1B8[FLIPPED_2[outflank_v]];

	outflank_h = ((O & 0x007c0000u) + 0x00040000u) & P;
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x007c0000u;

	flipped |= (((unsigned int) P << 7) & 0x00000400u & (unsigned int) O);

	outflank_d9 = ((O | ~0x4020100804000000ULL) + 0x0000000004000000ULL) & P & 0x4020100800000000ULL;
	flipped |= (outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x0020100804000000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square C3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_C3(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_2[(((LODWORD(O) & 0x04040400u) + ((HIDWORD(O) & 0x00040404u) << 4)) * 0x00408102u) >> 25]
		& ((((LODWORD(P) & 0x04040404u) + ((HIDWORD(P) & 0x04040404u) << 4)) * 0x00408102u) >> 24);
	flipped = C1C8[FLIPPED_2[outflank_v]];

	outflank_h = OUTFLANK_2[(O >> 17) & 0x3f] & ((unsigned int) P >> 16);
	flipped |= (FLIPPED_2[outflank_h] << 17);

	flipped |= (((HIDWORD(P) << 25) & 0x02000000u) | (((unsigned int) P << 7) & 0x00000800u)) & (unsigned int) O;

	outflank_d9 = OUTFLANK_2[(((LODWORD(O) & 0x08040200u) + (HIDWORD(O) & 0x00402010u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x08040201u) + (HIDWORD(P) & 0x80402010u)) * 0x01010101u) >> 24);
	flipped |= A1H8[FLIPPED_2[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square D3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_D3(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_2[(((LODWORD(O) & 0x08080800u) + ((HIDWORD(O) & 0x00080808u) << 4)) * 0x00204081u) >> 25]
		& ((((LODWORD(P) & 0x08080808u) + ((HIDWORD(P) & 0x08080808u) << 4)) * 0x00204081u) >> 24);
	flipped = D1D8[FLIPPED_2[outflank_v]];

	outflank_h = OUTFLANK_3[(O >> 17) & 0x3f] & ((unsigned int) P >> 16);
	flipped |= (FLIPPED_3[outflank_h] << 17);

	outflank_d7 = OUTFLANK_3[(((LODWORD(O) & 0x04081000u) + (HIDWORD(O) & 0x00000002u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x04081020u) + (HIDWORD(P) & 0x00000102u)) * 0x01010101u) >> 24);
	flipped |= F1A6[FLIPPED_3[outflank_d7]];

	outflank_d9 = OUTFLANK_2[(((LODWORD(O) & 0x10080400u) + (HIDWORD(O) & 0x00004020u)) * 0x01010101u) >> 26]
		& ((((LODWORD(P) & 0x10080402u) + (HIDWORD(P) & 0x00804020u)) * 0x01010101u) >> 25);
	flipped |= B1H7[FLIPPED_2[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square E3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_E3(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_2[((((LODWORD(O) & 0x10101000u) >> 4) + (HIDWORD(O) & 0x00101010u)) * 0x01020408u) >> 25]
		& (((((LODWORD(P) & 0x10101010u) >> 4) + (HIDWORD(P) & 0x10101010u)) * 0x01020408u) >> 24);
	flipped = E1E8[FLIPPED_2[outflank_v]];

	outflank_h = OUTFLANK_4[(O >> 17) & 0x3f] & ((unsigned int) P >> 16);
	flipped |= (FLIPPED_4[outflank_h] << 17);

	outflank_d7 = OUTFLANK_4[(((LODWORD(O) & 0x08102000u) + (HIDWORD(O) & 0x00000204u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x08102040u) + (HIDWORD(P) & 0x00010204u)) * 0x01010101u) >> 24);
	flipped |= G1A7[FLIPPED_4[outflank_d7]];

	outflank_d9 = OUTFLANK_2[(((LODWORD(O) & 0x20100800u) + (HIDWORD(O) & 0x00000040u)) * 0x01010101u) >> 27]
		& ((((LODWORD(P) & 0x20100804u) + (HIDWORD(P) & 0x00008040u)) * 0x01010101u) >> 26);
	flipped |= C1H6[FLIPPED_2[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square F3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_F3(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7;
	unsigned long long flipped;

	outflank_v = OUTFLANK_2[((((LODWORD(O) & 0x20202000u) >> 4) + (HIDWORD(O) & 0x00202020u)) * 0x00810204u) >> 25]
		& (((((LODWORD(P) & 0x20202020u) >> 4) + (HIDWORD(P) & 0x20202020u)) * 0x00810204u) >> 24);
	flipped = F1F8[FLIPPED_2[outflank_v]];

	outflank_h = OUTFLANK_5[(O >> 17) & 0x3f] & ((unsigned int) P >> 16);
	flipped |= (FLIPPED_5[outflank_h] << 17);

	outflank_d7 = OUTFLANK_5[(((LODWORD(O) & 0x10204000u) + (HIDWORD(O) & 0x00020408u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x10204080u) + (HIDWORD(P) & 0x01020408u)) * 0x01010101u) >> 24);
	flipped |= H1A8[FLIPPED_5[outflank_d7]];

	flipped |= (((HIDWORD(P) << 23) & 0x40000000u) | (((unsigned int) P << 9) & 0x00001000u)) & (unsigned int) O;

	return flipped;
}

/**
 * Compute flipped discs when playing on square G3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_G3(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v;
	unsigned long long flipped, outflank_d7;

	outflank_v = OUTFLANK_2[((((LODWORD(O) & 0x40404000u) >> 4) + (HIDWORD(O) & 0x00404040u)) * 0x00408102u) >> 25]
		& (((((LODWORD(P) & 0x40404040u) >> 4) + (HIDWORD(P) & 0x40404040u)) * 0x00408102u) >> 24);
	flipped = G1G8[FLIPPED_2[outflank_v]];

	outflank_h = OUTFLANK_7[(O >> 16) & 0x3e] & ((unsigned int) P >> 15);
	flipped |= ((-outflank_h) & 0x3e) << 16;

	outflank_d7 = ((O | ~0x0204081020000000ULL) + 0x0000000020000000ULL) & P & 0x0204081000000000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0004081020000000ULL;

	flipped |= (((unsigned int) P << 9) & 0x00002000u & (unsigned int) O);

	return flipped;
}

/**
 * Compute flipped discs when playing on square H3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_H3(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v;
	unsigned long long flipped, outflank_d7;

	outflank_v = OUTFLANK_2[((((LODWORD(O) & 0x80808000u) >> 4) + (HIDWORD(O) & 0x00808080u)) * 0x00204081u) >> 25]
		& (((((LODWORD(P) & 0x80808080u) >> 4) + (HIDWORD(P) & 0x80808080u)) * 0x00204081u) >> 24);
	flipped = H1H8[FLIPPED_2[outflank_v]];

	outflank_h = OUTFLANK_7[(O >> 17) & 0x3f] & ((unsigned int) P >> 16);
	flipped |= ((-outflank_h) & 0x3f) << 17;

	outflank_d7 = ((O | ~0x0408102040000000ULL) + 0x0000000040000000ULL) & P & 0x0408102000000000ULL;
	flipped |= (outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x0008102040000000ULL;

	flipped |= (((unsigned int) P << 9) & 0x00004000u & (unsigned int) O);

	return flipped;
}

/**
 * Compute flipped discs when playing on square A4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_A4(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_3[(((LODWORD(O) & 0x01010100u) + ((HIDWORD(O) & 0x00010101u) << 4)) * 0x01020408u) >> 25]
		& ((((LODWORD(P) & 0x01010101u) + ((HIDWORD(P) & 0x01010101u) << 4)) * 0x01020408u) >> 24);
	flipped = A1A8[FLIPPED_3[outflank_v]];

	outflank_h = ((O & 0x7e000000u) + 0x02000000u) & P;
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x7e000000u;

	flip_d7 = LODWORD(O) & 0x00020000u;
	flip_d7 |= (flip_d7 >> 7) & LODWORD(O);
	flipped |= flip_d7 & -(flip_d7 & (LODWORD(P) << 7));

	outflank_d9 = ((HIDWORD(O) | ~0x10080402u) + 0x00000002u) & HIDWORD(P) & 0x10080400u;
	flipped |= (unsigned long long) ((outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x00080402u) << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square B4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_B4(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_3[(((LODWORD(O) & 0x02020200u) + ((HIDWORD(O) & 0x00020202u) << 4)) * 0x00810204u) >> 25]
		& ((((LODWORD(P) & 0x02020202u) + ((HIDWORD(P) & 0x02020202u) << 4)) * 0x00810204u) >> 24);
	flipped = B1B8[FLIPPED_3[outflank_v]];

	outflank_h = ((O & 0x7c000000u) + 0x04000000u) & P;
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x7c000000u;

	flip_d7 = LODWORD(O) & 0x00040000u;
	flip_d7 |= (flip_d7 >> 7) & LODWORD(O);
	flipped |= flip_d7 & -(flip_d7 & (LODWORD(P) << 7));

	outflank_d9 = ((HIDWORD(O) | ~0x20100804u) + 0x00000004u) & HIDWORD(P) & 0x20100800u;
	flipped |= (unsigned long long) ((outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x00100804u) << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square C4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_C4(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_3[(((LODWORD(O) & 0x04040400u) + ((HIDWORD(O) & 0x00040404u) << 4)) * 0x00408102u) >> 25]
		& ((((LODWORD(P) & 0x04040404u) + ((HIDWORD(P) & 0x04040404u) << 4)) * 0x00408102u) >> 24);
	flipped = C1C8[FLIPPED_3[outflank_v]];

	outflank_h = OUTFLANK_2[(O >> 25) & 0x3f] & ((unsigned int) P >> 24);
	flipped |= (FLIPPED_2[outflank_h] << 25);

	outflank_d7 = OUTFLANK_2[(((LODWORD(O) & 0x04081000u) + (HIDWORD(O) & 0x00000002u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x04081020u) + (HIDWORD(P) & 0x00000102u)) * 0x01010101u) >> 24);
	flipped |= F1A6[FLIPPED_2[outflank_d7]];

	outflank_d9 = OUTFLANK_2[(((LODWORD(O) & 0x04020000u) + (HIDWORD(O) & 0x00201008u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x04020100u) + (HIDWORD(P) & 0x40201008u)) * 0x01010101u) >> 24);
	flipped |= A2G8[FLIPPED_2[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square D4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_D4(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_3[(((LODWORD(O) & 0x08080800u) + ((HIDWORD(O) & 0x00080808u) << 4)) * 0x00204081u) >> 25]
		& ((((LODWORD(P) & 0x08080808u) + ((HIDWORD(P) & 0x08080808u) << 4)) * 0x00204081u) >> 24);
	flipped = D1D8[FLIPPED_3[outflank_v]];

	outflank_h = OUTFLANK_3[(O >> 25) & 0x3f] & ((unsigned int) P >> 24);
	flipped |= (FLIPPED_3[outflank_h] << 25);

	outflank_d7 = OUTFLANK_3[(((LODWORD(O) & 0x08102000u) + (HIDWORD(O) & 0x00000204u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x08102040u) + (HIDWORD(P) & 0x00010204u)) * 0x01010101u) >> 24);
	flipped |= G1A7[FLIPPED_3[outflank_d7]];

	outflank_d9 = OUTFLANK_3[(((LODWORD(O) & 0x08040200u) + (HIDWORD(O) & 0x00402010u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x08040201u) + (HIDWORD(P) & 0x80402010u)) * 0x01010101u) >> 24);
	flipped |= A1H8[FLIPPED_3[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square E3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_E4(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_3[((((LODWORD(O) & 0x10101000u) >> 4) + (HIDWORD(O) & 0x00101010u)) * 0x01020408u) >> 25]
		& (((((LODWORD(P) & 0x10101010u) >> 4) + (HIDWORD(P) & 0x10101010u)) * 0x01020408u) >> 24);
	flipped = E1E8[FLIPPED_3[outflank_v]];

	outflank_h = OUTFLANK_4[(O >> 25) & 0x3f] & ((unsigned int) P >> 24);
	flipped |= (FLIPPED_4[outflank_h] << 25);

	outflank_d7 = OUTFLANK_4[(((LODWORD(O) & 0x10204000u) + (HIDWORD(O) & 0x00020408u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x10204080u) + (HIDWORD(P) & 0x01020408u)) * 0x01010101u) >> 24);
	flipped |= H1A8[FLIPPED_4[outflank_d7]];

	outflank_d9 = OUTFLANK_3[(((LODWORD(O) & 0x10080400u) + (HIDWORD(O) & 0x00004020u)) * 0x01010101u) >> 26]
		& ((((LODWORD(P) & 0x10080402u) + (HIDWORD(P) & 0x00804020u)) * 0x01010101u) >> 25);
	flipped |= B1H7[FLIPPED_3[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square F4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_F4(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_3[((((LODWORD(O) & 0x20202000u) >> 4) + (HIDWORD(O) & 0x00202020u)) * 0x00810204u) >> 25]
		& (((((LODWORD(P) & 0x20202020u) >> 4) + (HIDWORD(P) & 0x20202020u)) * 0x00810204u) >> 24);
	flipped = F1F8[FLIPPED_3[outflank_v]];

	outflank_h = OUTFLANK_5[(O >> 25) & 0x3f] & ((unsigned int) P >> 24);
	flipped |= (FLIPPED_5[outflank_h] << 25);

	outflank_d7 = OUTFLANK_4[(((LODWORD(O) & 0x20400000u) + (HIDWORD(O) & 0x00040810u)) * 0x01010101u) >> 26]
		& ((((LODWORD(P) & 0x20408000u) + (HIDWORD(P) & 0x02040810u)) * 0x01010101u) >> 25);
	flipped |= H2B8[FLIPPED_4[outflank_d7]];

	outflank_d9 = OUTFLANK_3[(((LODWORD(O) & 0x20100800u) + (HIDWORD(O) & 0x00000040u)) * 0x01010101u) >> 27]
		& ((((LODWORD(P) & 0x20100804u) + (HIDWORD(P) & 0x00008040u)) * 0x01010101u) >> 26);
	flipped |= C1H6[FLIPPED_3[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square G4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_G4(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, flip_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_3[((((LODWORD(O) & 0x40404000u) >> 4) + (HIDWORD(O) & 0x00404040u)) * 0x00408102u) >> 25]
		& (((((LODWORD(P) & 0x40404040u) >> 4) + (HIDWORD(P) & 0x40404040u)) * 0x00408102u) >> 24);
	flipped = G1G8[FLIPPED_3[outflank_v]];

	outflank_h = OUTFLANK_7[(O >> 24) & 0x3e] & ((unsigned int) P >> 23);
	flipped |= ((-outflank_h) & 0x3e) << 24;

	outflank_d7 = ((HIDWORD(O) | ~0x04081020u) + 0x00000020u) & HIDWORD(P) & 0x04081000u;
	flipped |= (unsigned long long) ((outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x00081020u) << 32;

	flip_d9 = LODWORD(O) & 0x00200000u;
	flip_d9 |= (flip_d9 >> 9) & LODWORD(O);
	flipped |= flip_d9 & -(flip_d9 & (LODWORD(P) << 9));

	return flipped;
}

/**
 * Compute flipped discs when playing on square H4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_H4(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, flip_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_3[((((LODWORD(O) & 0x80808000u) >> 4) + (HIDWORD(O) & 0x00808080u)) * 0x00204081u) >> 25]
		& (((((LODWORD(P) & 0x80808080u) >> 4) + (HIDWORD(P) & 0x80808080u)) * 0x00204081u) >> 24);
	flipped = H1H8[FLIPPED_3[outflank_v]];

	outflank_h = OUTFLANK_7[(O >> 25) & 0x3f] & ((unsigned int) P >> 24);
	flipped |= ((-outflank_h) & 0x3f) << 25;

	outflank_d7 = ((HIDWORD(O) | ~0x08102040u) + 0x00000040u) & HIDWORD(P) & 0x08102000u;
	flipped |= (unsigned long long) ((outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x00102040u) << 32;

	flip_d9 = LODWORD(O) & 0x00400000u;
	flip_d9 |= (flip_d9 >> 9) & LODWORD(O);
	flipped |= flip_d9 & -(flip_d9 & (LODWORD(P) << 9));

	return flipped;
}

/**
 * Compute flipped discs when playing on square A5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_A5(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_4[(((LODWORD(O) & 0x01010100u) + ((HIDWORD(O) & 0x00010101u) << 4)) * 0x01020408u) >> 25]
		& ((((LODWORD(P) & 0x01010101u) + ((HIDWORD(P) & 0x01010101u) << 4)) * 0x01020408u) >> 24);
	flipped = A1A8[FLIPPED_4[outflank_v]];

	outflank_h = ((HIDWORD(O) & 0x0000007eu) + 0x00000002u) & HIDWORD(P);
	flipped |= (unsigned long long) ((((outflank_h << 8) - outflank_h) >> 8) & 0x0000007eu) << 32;

	flip_d7 = LODWORD(O) & ((LODWORD(O) >> 7) | 0x02000000u);
	flip_d7 &= ((flip_d7 & 0x02040000u) >> 14) | 0x02040000u;
	flipped |= flip_d7 & -(flip_d7 & (LODWORD(P) << 7));

	outflank_d9 = ((HIDWORD(O) | ~0x08040200u) + 0x00000200u) & HIDWORD(P) & 0x08040000u;
	flipped |= (unsigned long long) ((outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x00040200u) << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square B5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_B5(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_4[(((LODWORD(O) & 0x02020200u) + ((HIDWORD(O) & 0x00020202u) << 4)) * 0x00810204u) >> 25]
		& ((((LODWORD(P) & 0x02020202u) + ((HIDWORD(P) & 0x02020202u) << 4)) * 0x00810204u) >> 24);
	flipped = B1B8[FLIPPED_4[outflank_v]];

	outflank_h = ((HIDWORD(O) & 0x0000007cu) + 0x00000004u) & (P >> 32);
	flipped |= (unsigned long long) ((((outflank_h << 8) - outflank_h) >> 8) & 0x0000007cu) << 32;

	flip_d7 = LODWORD(O) & ((LODWORD(O) >> 7) | 0x04000000u);
	flip_d7 &= ((flip_d7 & 0x04080000u) >> 14) | 0x04080000u;
	flipped |= flip_d7 & -(flip_d7 & (LODWORD(P) << 7));

	outflank_d9 = ((HIDWORD(O) | ~0x10080400u) + 0x00000400u) & HIDWORD(P) & 0x10080000u;
	flipped |= (unsigned long long) ((outflank_d9 - (unsigned int) (outflank_d9 != 0)) & 0x00080400u) << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square C5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_C5(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_4[(((LODWORD(O) & 0x04040400u) + ((HIDWORD(O) & 0x00040404u) << 4)) * 0x00408102u) >> 25]
		& ((((LODWORD(P) & 0x04040404u) + ((HIDWORD(P) & 0x04040404u) << 4)) * 0x00408102u) >> 24);
	flipped = C1C8[FLIPPED_4[outflank_v]];

	outflank_h = OUTFLANK_2[(O >> 33) & 0x3f] & (P >> 32);
	flipped |= ((unsigned long long) FLIPPED_2[outflank_h]) << 33;

	outflank_d7 = OUTFLANK_2[(((LODWORD(O) & 0x08102000u) + (HIDWORD(O) & 0x00000204u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x08102040u) + (HIDWORD(P) & 0x00010204u)) * 0x01010101u) >> 24);
	flipped |= G1A7[FLIPPED_2[outflank_d7]];

	outflank_d9 = OUTFLANK_2[(((LODWORD(O) & 0x02000000u) + (HIDWORD(O) & 0x00100804u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x02010000u) + (HIDWORD(P) & 0x20100804u)) * 0x01010101u) >> 24);
	flipped |= A3F8[FLIPPED_2[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square D5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_D5(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_4[(((LODWORD(O) & 0x08080800u) + ((HIDWORD(O) & 0x00080808u) << 4)) * 0x00204081u) >> 25]
		& ((((LODWORD(P) & 0x08080808u) + ((HIDWORD(P) & 0x08080808u) << 4)) * 0x00204081u) >> 24);
	flipped = D1D8[FLIPPED_4[outflank_v]];

	outflank_h = OUTFLANK_3[(O >> 33) & 0x3f] & (P >> 32);
	flipped |= ((unsigned long long) FLIPPED_3[outflank_h]) << 33;

	outflank_d7 = OUTFLANK_3[(((LODWORD(O) & 0x10204000u) + (HIDWORD(O) & 0x00020408u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x10204080u) + (HIDWORD(P) & 0x01020408u)) * 0x01010101u) >> 24);
	flipped |= H1A8[FLIPPED_3[outflank_d7]];

	outflank_d9 = OUTFLANK_3[(((LODWORD(O) & 0x04020000u) + (HIDWORD(O) & 0x00201008u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x04020100u) + (HIDWORD(P) & 0x40201008u)) * 0x01010101u) >> 24);
	flipped |= A2G8[FLIPPED_3[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square E5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_E5(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_4[((((LODWORD(O) & 0x10101000u) >> 4) + (HIDWORD(O) & 0x00101010u)) * 0x01020408u) >> 25]
		& (((((LODWORD(P) & 0x10101010u) >> 4) + (HIDWORD(P) & 0x10101010u)) * 0x01020408u) >> 24);
	flipped = E1E8[FLIPPED_4[outflank_v]];

	outflank_h = OUTFLANK_4[(O >> 33) & 0x3f] & (P >> 32);
	flipped |= ((unsigned long long) FLIPPED_4[outflank_h]) << 33;

	outflank_d7 = OUTFLANK_3[(((LODWORD(O) & 0x20400000u) + (HIDWORD(O) & 0x00040810u)) * 0x01010101u) >> 26]
		& ((((LODWORD(P) & 0x20408000u) + (HIDWORD(P) & 0x02040810u)) * 0x01010101u) >> 25);
	flipped |= H2B8[FLIPPED_3[outflank_d7]];

	outflank_d9 = OUTFLANK_4[(((LODWORD(O) & 0x08040200u) + (HIDWORD(O) & 0x00402010u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x08040201u) + (HIDWORD(P) & 0x80402010u)) * 0x01010101u) >> 24);
	flipped |= A1H8[FLIPPED_4[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square F5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_F5(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_4[((((LODWORD(O) & 0x20202000u) >> 4) + (HIDWORD(O) & 0x00202020u)) * 0x00810204u) >> 25]
		& (((((LODWORD(P) & 0x20202020u) >> 4) + (HIDWORD(P) & 0x20202020u)) * 0x00810204u) >> 24);
	flipped = F1F8[FLIPPED_4[outflank_v]];

	outflank_h = OUTFLANK_5[(O >> 33) & 0x3f] & (P >> 32);
	flipped |= ((unsigned long long) FLIPPED_5[outflank_h]) << 33;

	outflank_d7 = OUTFLANK_3[(((LODWORD(O) & 0x40000000u) + (HIDWORD(O) & 0x00081020u)) * 0x01010101u) >> 27]
		& ((((LODWORD(P) & 0x40800000u) + (HIDWORD(P) & 0x04081020u)) * 0x01010101u) >> 26);
	flipped |= H3C8[FLIPPED_3[outflank_d7]];

	outflank_d9 = OUTFLANK_4[(((LODWORD(O) & 0x10080400u) + (HIDWORD(O) & 0x00004020u)) * 0x01010101u) >> 26]
		& ((((LODWORD(P) & 0x10080402u) + (HIDWORD(P) & 0x00804020u)) * 0x01010101u) >> 25);
	flipped |= B1H7[FLIPPED_4[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square G5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_G5(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, flip_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_4[((((LODWORD(O) & 0x40404000u) >> 4) + (HIDWORD(O) & 0x00404040u)) * 0x00408102u) >> 25]
		& (((((LODWORD(P) & 0x40404040u) >> 4) + (HIDWORD(P) & 0x40404040u)) * 0x00408102u) >> 24);
	flipped = G1G8[FLIPPED_4[outflank_v]];

	outflank_h = OUTFLANK_7[(O >> 32) & 0x3e] & (P >> 31);
	flipped |= (unsigned long long) ((-outflank_h) & 0x3e) << 32;

	outflank_d7 = ((HIDWORD(O) | ~0x08102000u) + 0x00002000u) & HIDWORD(P) & 0x08100000u;
	flipped |= (unsigned long long) ((outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x00102000u) << 32;

	flip_d9 = LODWORD(O) & ((LODWORD(O) >> 9) | 0x20000000u);
	flip_d9 &= ((flip_d9 & 0x20100000u) >> 18) | 0x20100000u;
	flipped |= flip_d9 & -(flip_d9 & (LODWORD(P) << 9));

	return flipped;
}

/**
 * Compute flipped discs when playing on square H5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_H5(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, flip_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_4[((((LODWORD(O) & 0x80808000u) >> 4) + (HIDWORD(O) & 0x00808080u)) * 0x00204081u) >> 25]
		& (((((LODWORD(P) & 0x80808080u) >> 4) + (HIDWORD(P) & 0x80808080u)) * 0x00204081u) >> 24);
	flipped = H1H8[FLIPPED_4[outflank_v]];

	outflank_h = OUTFLANK_7[(O >> 33) & 0x3f] & (P >> 32);
	flipped |= (unsigned long long) ((-outflank_h) & 0x3f) << 33;

	outflank_d7 = ((HIDWORD(O) | ~0x10204000u) + 0x00004000u) & HIDWORD(P) & 0x10200000u;
	flipped |= (unsigned long long) ((outflank_d7 - (unsigned int) (outflank_d7 != 0)) & 0x00204000u) << 32;

	flip_d9 = LODWORD(O) & ((LODWORD(O) >> 9) | 0x40000000u);
	flip_d9 &= ((flip_d9 & 0x40200000u) >> 18) | 0x40200000u;
	flipped |= flip_d9 & -(flip_d9 & (LODWORD(P) << 9));

	return flipped;
}

/**
 * Compute flipped discs when playing on square A6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_A6(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d7;
	unsigned long long flipped;

	outflank_v = OUTFLANK_5[(((LODWORD(O) & 0x01010100u) + ((HIDWORD(O) & 0x00010101u) << 4)) * 0x01020408u) >> 25]
		& ((((LODWORD(P) & 0x01010101u) + ((HIDWORD(P) & 0x01010101u) << 4)) * 0x01020408u) >> 24);
	flipped = A1A8[FLIPPED_5[outflank_v]];

	outflank_h = ((HIDWORD(O) & 0x00007e00u) + 0x00000200u) & HIDWORD(P);
	flipped |= (unsigned long long) ((outflank_h - (outflank_h >> 8)) & 0x00007e00u) << 32;

	flip_d7 = (unsigned int) (O >> 8);
	flip_d7 &= (flip_d7 >> 7) | 0x02000000u;
	flip_d7 &= ((flip_d7 & 0x02040000u) >> 14) | 0x02040000u;
	flipped |= (unsigned long long) (flip_d7 & -(flip_d7 & (LODWORD(P) >> 1))) << 8;

	flipped |= (unsigned long long) ((HIDWORD(P) >> 9) & 0x00020000u & HIDWORD(O)) << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square B6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_B6(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d7;
	unsigned long long flipped;

	outflank_v = OUTFLANK_5[(((LODWORD(O) & 0x02020200u) + ((HIDWORD(O) & 0x00020202u) << 4)) * 0x00810204u) >> 25]
		& ((((LODWORD(P) & 0x02020202u) + ((HIDWORD(P) & 0x02020202u) << 4)) * 0x00810204u) >> 24);
	flipped = B1B8[FLIPPED_5[outflank_v]];

	outflank_h = ((HIDWORD(O) & 0x00007c00u) + 0x00000400u) & HIDWORD(P);
	flipped |= (unsigned long long) ((outflank_h - (outflank_h >> 8)) & 0x00007c00u) << 32;

	flip_d7 = (unsigned int) (O >> 8);
	flip_d7 &= (flip_d7 >> 7) | 0x04000000u;
	flip_d7 &= ((flip_d7 & 0x04080000u) >> 14) | 0x04080000u;
	flipped |= (unsigned long long) (flip_d7 & -(flip_d7 & (LODWORD(P) >> 1))) << 8;

	flipped |= (unsigned long long) ((HIDWORD(P) >> 9) & 0x00040000u & HIDWORD(O)) << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square C6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_C6(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7;
	unsigned long long flipped;

	outflank_v = OUTFLANK_5[(((LODWORD(O) & 0x04040400u) + ((HIDWORD(O) & 0x00040404u) << 4)) * 0x00408102u) >> 25]
		& ((((LODWORD(P) & 0x04040404u) + ((HIDWORD(P) & 0x04040404u) << 4)) * 0x00408102u) >> 24);
	flipped = C1C8[FLIPPED_5[outflank_v]];

	outflank_h = OUTFLANK_2[(O >> 41) & 0x3f] & (P >> 40);
	flipped |= ((unsigned long long) FLIPPED_2[outflank_h]) << 41;

	outflank_d7 = OUTFLANK_2[(((LODWORD(O) & 0x10204000u) + (HIDWORD(O) & 0x00020408u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x10204080u) + (HIDWORD(P) & 0x01020408u)) * 0x01010101u) >> 24);
	flipped |= H1A8[FLIPPED_2[outflank_d7]];

	flipped |= (unsigned long long) ((((HIDWORD(P) >> 9) & 0x00080000u) | ((LODWORD(P) >> 23) & 0x00000002u)) & HIDWORD(O)) << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square D6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_D6(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_5[(((LODWORD(O) & 0x08080800u) + ((HIDWORD(O) & 0x00080808u) << 4)) * 0x00204081u) >> 25]
		& ((((LODWORD(P) & 0x08080808u) + ((HIDWORD(P) & 0x08080808u) << 4)) * 0x00204081u) >> 24);
	flipped = D1D8[FLIPPED_5[outflank_v]];

	outflank_h = OUTFLANK_3[(O >> 41) & 0x3f] & (P >> 40);
	flipped |= ((unsigned long long) FLIPPED_3[outflank_h]) << 41;

	outflank_d7 = OUTFLANK_2[(((LODWORD(O) & 0x20400000u) + (HIDWORD(O) & 0x00040810u)) * 0x01010101u) >> 26]
		& ((((LODWORD(P) & 0x20408000u) + (HIDWORD(P) & 0x02040810u)) * 0x01010101u) >> 25);
	flipped |= H2B8[FLIPPED_2[outflank_d7]];

	outflank_d9 = OUTFLANK_3[(((LODWORD(O) & 0x02000000u) + (HIDWORD(O) & 0x00100804u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x02010000u) + (HIDWORD(P) & 0x20100804u)) * 0x01010101u) >> 24);
	flipped |= A3F8[FLIPPED_3[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square E6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_E6(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d7, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_5[((((LODWORD(O) & 0x10101000u) >> 4) + (HIDWORD(O) & 0x00101010u)) * 0x01020408u) >> 25]
		& (((((LODWORD(P) & 0x10101010u) >> 4) + (HIDWORD(P) & 0x10101010u)) * 0x01020408u) >> 24);
	flipped = E1E8[FLIPPED_5[outflank_v]];

	outflank_h = OUTFLANK_4[(O >> 41) & 0x3f] & (P >> 40);
	flipped |= ((unsigned long long) FLIPPED_4[outflank_h]) << 41;

	outflank_d7 = OUTFLANK_2[(((LODWORD(O) & 0x40000000u) + (HIDWORD(O) & 0x00081020u)) * 0x01010101u) >> 27]
		& ((((LODWORD(P) & 0x40800000u) + (HIDWORD(P) & 0x04081020u)) * 0x01010101u) >> 26);
	flipped |= H3C8[FLIPPED_2[outflank_d7]];

	outflank_d9 = OUTFLANK_4[(((LODWORD(O) & 0x04020100u) + (HIDWORD(O) & 0x00201008u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x04020100u) + (HIDWORD(P) & 0x40201008u)) * 0x01010101u) >> 24);
	flipped |= A2G8[FLIPPED_4[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square F6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_F6(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_5[((((LODWORD(O) & 0x20202000u) >> 4) + (HIDWORD(O) & 0x00202020u)) * 0x00810204u) >> 25]
		& (((((LODWORD(P) & 0x20202020u) >> 4) + (HIDWORD(P) & 0x20202020u)) * 0x00810204u) >> 24);
	flipped = F1F8[FLIPPED_5[outflank_v]];

	outflank_h = OUTFLANK_5[(O >> 41) & 0x3f] & (P >> 40);
	flipped |= ((unsigned long long) FLIPPED_5[outflank_h]) << 41;

	flipped |= (unsigned long long) ((((HIDWORD(P) >> 7) & 0x00100000u) | ((LODWORD(P) >> 25) & 0x00000040u)) & HIDWORD(O)) << 32;

	outflank_d9 = OUTFLANK_5[(((LODWORD(O) & 0x08040200u) + (HIDWORD(O) & 0x00402010u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x08040201u) + (HIDWORD(P) & 0x80402010u)) * 0x01010101u) >> 24);
	flipped |= A1H8[FLIPPED_5[outflank_d9]];

	return flipped;
}

/**
 * Compute flipped discs when playing on square G6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_G6(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_5[((((LODWORD(O) & 0x40404000u) >> 4) + (HIDWORD(O) & 0x00404040u)) * 0x00408102u) >> 25]
		& (((((LODWORD(P) & 0x40404040u) >> 4) + (HIDWORD(P) & 0x40404040u)) * 0x00408102u) >> 24);
	flipped = G1G8[FLIPPED_5[outflank_v]];

	outflank_h = OUTFLANK_7[(O >> 40) & 0x3e] & (P >> 39);
	flipped |= (unsigned long long) ((-outflank_h) & 0x3e) << 40;

	flipped |= (unsigned long long) ((HIDWORD(P) >> 7) & 0x00200000u & HIDWORD(O)) << 32;

	flip_d9 = (unsigned int) (O >> 8);
	flip_d9 &= (flip_d9 >> 9) | 0x20000000u;
	flip_d9 &= ((flip_d9 & 0x20100000u) >> 18) | 0x20100000u;
	flipped |= (unsigned long long) (flip_d9 & -(flip_d9 & (LODWORD(P) << 1))) << 8;

	return flipped;
}

/**
 * Compute flipped discs when playing on square H6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_H6(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d9;
	unsigned long long flipped;

	outflank_v = OUTFLANK_5[((((LODWORD(O) & 0x80808000u) >> 4) + (HIDWORD(O) & 0x00808080u)) * 0x00204081u) >> 25]
		& (((((LODWORD(P) & 0x80808080u) >> 4) + (HIDWORD(P) & 0x80808080u)) * 0x00204081u) >> 24);
	flipped = H1H8[FLIPPED_5[outflank_v]];

	outflank_h = OUTFLANK_7[(O >> 41) & 0x3f] & (P >> 40);
	flipped |= (unsigned long long) ((-outflank_h) & 0x3f) << 41;

	flipped |= (unsigned long long) ((HIDWORD(P) >> 7) & 0x00400000u & HIDWORD(O)) << 32;

	flip_d9 = (unsigned int) (O >> 8);
	flip_d9 &= (flip_d9 >> 9) | 0x40000000u;
	flip_d9 &= ((flip_d9 & 0x40200000u) >> 18) | 0x40200000u;
	flipped |= (unsigned long long) (flip_d9 & -(flip_d9 & (LODWORD(P) << 1))) << 8;

	return flipped;
}

/**
 * Compute flipped discs when playing on square A7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_A7(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_v, outflank_h, outflank_d7;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x01010100u) << 4) + (HIDWORD(O) & 0x00000101u)) * 0x08040201u) >> 24) + 4)
		& (((((LODWORD(P) & 0x01010101u) << 4) + (HIDWORD(P) & 0x00000001u)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x0000003e1e0e0602ULL) & 0x0000010101010100ULL;

	outflank_h = ((HIDWORD(O) & 0x007e0000u) + 0x00020000u) & HIDWORD(P);
	flipped |= (unsigned long long) ((outflank_h - (outflank_h >> 8)) & 0x007e0000u) << 32;

	outflank_d7 = (((((LODWORD(O) & 0x08102000u) + (HIDWORD(O) & 0x00000204u)) * 0x01010101u) >> 24) + 2)
		& ((((LODWORD(P) & 0x08102040u) + (HIDWORD(P) & 0x00000004u)) * 0x01010101u) >> 24);
	flipped |= (outflank_d7 * 0x000000f8f0e0c080ULL) & 0x0000020408102000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square B7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_B7(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_v, outflank_h, outflank_d7;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x02020200u) << 3) + ((HIDWORD(O) & 0x00000202u) >> 1)) * 0x08040201u) >> 24) + 4)
		& (((((LODWORD(P) & 0x02020202u) << 3) + ((HIDWORD(P) & 0x00000002u) >> 1)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x0000007c3c1c0c04ULL) & 0x0000020202020200ULL;

	outflank_h = ((HIDWORD(O) & 0x007c0000u) + 0x00040000u) & HIDWORD(P);
	flipped |= (unsigned long long) ((outflank_h - (outflank_h >> 8)) & 0x007c0000u) << 32;

	outflank_d7 = (((((LODWORD(O) & 0x10204000u) + (HIDWORD(O) & 0x00000408u)) * 0x01010101u) >> 25) + 2)
		& ((((LODWORD(P) & 0x10204080u) + (HIDWORD(P) & 0x00000008u)) * 0x01010101u) >> 25);
	flipped |= (outflank_d7 * 0x000001f1e1c18100ULL) & 0x0000040810204000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square C7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_C7(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d7;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x04040400u) << 2) + ((HIDWORD(O) & 0x00000404u) >> 2)) * 0x08040201u) >> 24) + 4)
		& (((((LODWORD(P) & 0x04040404u) << 2) + ((HIDWORD(P) & 0x00000004u) >> 2)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x000000f878381808ULL) & 0x0000040404040400ULL;

	outflank_h = OUTFLANK_2[(O >> 49) & 0x3f] & (P >> 48);
	flipped |= ((unsigned long long) FLIPPED_2[outflank_h]) << 49;

	flip_d7 = (unsigned int) (O >> 16);
	flip_d7 &= (flip_d7 >> 7) | 0x08000000u;
	flip_d7 &= ((flip_d7 & 0x08100000u) >> 14) | 0x08100000u;
	flipped |= (unsigned long long) (flip_d7 & -(flip_d7 & (unsigned int) (P >> 9))) << 16;

	flipped |= (unsigned long long) ((HIDWORD(P) << 9) & 0x00000200 & HIDWORD(O)) << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square D7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_D7(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x08080800u) << 1) + ((HIDWORD(O) & 0x00000808u) >> 3)) * 0x08040201u) >> 24) + 4)
		& (((((LODWORD(P) & 0x08080808u) << 1) + ((HIDWORD(P) & 0x00000008u) >> 3)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x000001f0f0703010ULL) & 0x0000080808080800ULL;

	outflank_h = OUTFLANK_3[(O >> 49) & 0x3f] & (P >> 48);
	flipped |= ((unsigned long long) FLIPPED_3[outflank_h]) << 49;

	outflank_d = OUTFLANK_3[(((HIDWORD(O) & 0x00001422u) + (LODWORD(O) & 0x40000000u)) * 0x01010101u) >> 25]
		& ((((HIDWORD(P) & 0x00001422u) + (LODWORD(P) & 0x41800000u)) * 0x01010101u) >> 24);
	flipped |= (unsigned long long) A5D8H4[FLIPPED_3[outflank_d]] << 24;

	return flipped;
}

/**
 * Compute flipped discs when playing on square E7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_E7(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d;
	unsigned long long flipped;

	outflank_v = (((((LODWORD(O) & 0x10101000u) + ((HIDWORD(O) & 0x00001010u) >> 4)) * 0x08040201u) >> 24) + 4)
		& ((((LODWORD(P) & 0x10101010u) + ((HIDWORD(P) & 0x00000010u) >> 4)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x000003e1e0e06020ULL) & 0x0000101010101000ULL;

	outflank_h = OUTFLANK_4[(O >> 49) & 0x3f] & (P >> 48);
	flipped |= ((unsigned long long) FLIPPED_4[outflank_h]) << 49;

	outflank_d = OUTFLANK_4[(((HIDWORD(O) & 0x00002844u) + (LODWORD(O) & 0x02000000u)) * 0x01010101u) >> 25]
		& ((((HIDWORD(P) & 0x00002844u) + (LODWORD(P) & 0x82010000u)) * 0x01010101u) >> 24);
	flipped |= (unsigned long long) A4E8H5[FLIPPED_4[outflank_d]] << 24;

	return flipped;
}

/**
 * Compute flipped discs when playing on square F7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_F7(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d9;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x20202000u) >> 1) + ((HIDWORD(O) & 0x00002020u) >> 5)) * 0x08040201u) >> 24) + 4)
		& (((((LODWORD(P) & 0x20202020u) >> 1) + ((HIDWORD(P) & 0x00000020u) >> 5)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x000007c3c1c0c040ULL) & 0x0000202020202000ULL;

	outflank_h = OUTFLANK_5[(O >> 49) & 0x3f] & (P >> 48);
	flipped |= ((unsigned long long) FLIPPED_5[outflank_h]) << 49;

	flipped |= (unsigned long long) ((HIDWORD(P) << 7) & 0x00004000u & HIDWORD(O)) << 32;

	flip_d9 = (unsigned int) (O >> 16);
	flip_d9 &= (flip_d9 >> 9) | 0x10000000u;
	flip_d9 &= ((flip_d9 & 0x10080000u) >> 18) | 0x10080000u;
	flipped |= (unsigned long long) (flip_d9 & -(flip_d9 & (unsigned int) (P >> 7))) << 16;

	return flipped;
}

/**
 * Compute flipped discs when playing on square G7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_G7(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_v, outflank_h, outflank_d9;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x40404000u) >> 2) + ((HIDWORD(O) & 0x00004040u) >> 6)) * 0x08040201u) >> 24) + 4)
		& (((((LODWORD(P) & 0x40404040u) >> 2) + ((HIDWORD(P) & 0x00000040u) >> 6)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x00000f8783818080ULL) & 0x0000404040404000ULL;

	outflank_h = OUTFLANK_7[(O >> 48) & 0x3e] & (P >> 47);
	flipped |= (unsigned long long) ((-outflank_h) & 0x3e) << 48;

	outflank_d9 = OUTFLANK_7[(((LODWORD(O) & 0x08040200u) + (HIDWORD(O) & 0x00002010u)) * 0x01010101u) >> 24]
		& ((((LODWORD(P) & 0x08040201u) + (HIDWORD(P) & 0x00000010u)) * 0x01010101u) >> 23);
	flipped |= (outflank_d9 * 0x00001f0f07030100ULL) & 0x0000201008040200ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square H7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_H7(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d9;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x80808000u) >> 3) + ((HIDWORD(O) & 0x00008080u) >> 7)) * 0x08040201u) >> 24) + 4)
		& (((((LODWORD(P) & 0x80808080u) >> 3) + ((HIDWORD(P) & 0x00000080u) >> 7)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x00001f0f07030100ULL) & 0x0000808080808000ULL;

	outflank_h = OUTFLANK_7[(O >> 49) & 0x3f] & (P >> 48);
	flipped |= (unsigned long long) ((-outflank_h) & 0x3f) << 49;

	outflank_d9 = OUTFLANK_7[(((LODWORD(O) & 0x10080400u) + (HIDWORD(O) & 0x00004020u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x10080402u) + (HIDWORD(P) & 0x00000020u)) * 0x01010101u) >> 24);
	flipped |= (outflank_d9 * 0x00003e1e0e060200ULL) & 0x0000402010080400ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square A8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_A8(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_v, outflank_h, outflank_d7;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x01010100u) << 4) + (HIDWORD(O) & 0x00010101u)) * 0x08040201u) >> 24) + 2)
		& (((((LODWORD(P) & 0x01010101u) << 4) + (HIDWORD(P) & 0x00000101u)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x00007e3e1e0e0602ULL) & 0x0001010101010100ULL;

	outflank_h = ((HIDWORD(O) & 0x7e000000u) + 0x02000000u) & HIDWORD(P);
	flipped |= (unsigned long long) ((outflank_h - (outflank_h >> 8)) & 0x7e000000u) << 32;

	outflank_d7 = (((((LODWORD(O) & 0x10204000u) + (HIDWORD(O) & 0x00020408u)) * 0x01010101u) >> 24) + 2)
		& ((((LODWORD(P) & 0x10204080u) + (HIDWORD(P) & 0x00000408u)) * 0x01010101u) >> 24);
	flipped |= (outflank_d7 * 0x0000fcf8f0e0c080ULL) & 0x0002040810204000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square B8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_B8(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_v, outflank_h, outflank_d7;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x02020200u) << 3) + ((HIDWORD(O) & 0x00020202u) >> 1)) * 0x08040201u) >> 24) + 2)
		& (((((LODWORD(P) & 0x02020202u) << 3) + ((HIDWORD(P) & 0x00000202u) >> 1)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x0000fc7c3c1c0c04ULL) & 0x0002020202020200ULL;

	outflank_h = ((HIDWORD(O) & 0x7c000000u) + 0x04000000u) & HIDWORD(P);
	flipped |= (unsigned long long) ((outflank_h - (outflank_h >> 8)) & 0x7c000000u) << 32;

	outflank_d7 = (((((LODWORD(O) & 0x20400000u) + (HIDWORD(O) & 0x00040810u)) * 0x01010101u) >> 25) + 2)
		& ((((LODWORD(P) & 0x20408000u) + (HIDWORD(P) & 0x00000810u)) * 0x01010101u) >> 25);
	flipped |= (outflank_d7 * 0x0001f9f1e1c18000ULL) & 0x0004081020400000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square C8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_C8(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d7;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x04040400u) << 2) + ((HIDWORD(O) & 0x00040404u) >> 2)) * 0x08040201u) >> 24) + 2)
		& (((((LODWORD(P) & 0x04040404u) << 2) + ((HIDWORD(P) & 0x00000404u) >> 2)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x0001f8f878381808ULL) & 0x0004040404040400ULL;

	outflank_h = OUTFLANK_2[(O >> 57) & 0x3f] & (P >> 56);
	flipped |= ((unsigned long long) FLIPPED_2[outflank_h]) << 57;

	flip_d7 = (unsigned int) (O >> 24);
	flip_d7 &= (flip_d7 >> 7) | 0x08000000u;
	flip_d7 &= ((flip_d7 & 0x08100000u) >> 14) | 0x08100000u;
	flipped |= (unsigned long long) (flip_d7 & -(flip_d7 & (unsigned int) (P >> 17))) << 24;

	flipped |= (unsigned long long) ((HIDWORD(P) << 9) & 0x00020000 & HIDWORD(O)) << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square D8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_D8(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x08080800u) << 1) + ((HIDWORD(O) & 0x00080808u) >> 3)) * 0x08040201u) >> 24) + 2)
		& (((((LODWORD(P) & 0x08080808u) << 1) + ((HIDWORD(P) & 0x00000808u) >> 3)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x0003f1f0f0703010ULL) & 0x0008080808080800ULL;

	outflank_h = OUTFLANK_3[(O >> 57) & 0x3f] & (P >> 56);
	flipped |= ((unsigned long long) FLIPPED_3[outflank_h]) << 57;

	outflank_d = OUTFLANK_3[((HIDWORD(O) & 0x00142240u) * 0x01010101u) >> 25]
		& ((((HIDWORD(P) & 0x00142241u) + (LODWORD(P) & 0x80000000u)) * 0x01010101u) >> 24);
	flipped |= (unsigned long long) A5D8H4[FLIPPED_3[outflank_d]] << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square E8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_E8(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d;
	unsigned long long flipped;

	outflank_v = (((((LODWORD(O) & 0x10101000u) + ((HIDWORD(O) & 0x00101010u) >> 4)) * 0x08040201u) >> 24) + 2)
		& ((((LODWORD(P) & 0x10101010u) + ((HIDWORD(P) & 0x00001010u) >> 4)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x0007e3e1e0e06020ULL) & 0x0010101010101000ULL;

	outflank_h = OUTFLANK_4[(O >> 57) & 0x3f] & (P >> 56);
	flipped |= ((unsigned long long) FLIPPED_4[outflank_h]) << 57;

	outflank_d = OUTFLANK_4[((HIDWORD(O) & 0x00284402u) * 0x01010101u) >> 25]
		& ((((HIDWORD(P) & 0x00284482u) + (LODWORD(P) & 0x01000000u)) * 0x01010101u) >> 24);
	flipped |= (unsigned long long) A4E8H5[FLIPPED_4[outflank_d]] << 32;

	return flipped;
}

/**
 * Compute flipped discs when playing on square F8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_F8(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, flip_d9;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x20202000u) >> 1) + ((HIDWORD(O) & 0x00202020u) >> 5)) * 0x08040201u) >> 24) + 2)
		& (((((LODWORD(P) & 0x20202020u) >> 1) + ((HIDWORD(P) & 0x00002020u) >> 5)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x000fc7c3c1c0c040ULL) & 0x0020202020202000ULL;

	outflank_h = OUTFLANK_5[(O >> 57) & 0x3f] & (P >> 56);
	flipped |= ((unsigned long long) FLIPPED_5[outflank_h]) << 57;

	flipped |= (unsigned long long) ((HIDWORD(P) << 7) & 0x00400000u & HIDWORD(O)) << 32;

	flip_d9 = (unsigned int) (O >> 24);
	flip_d9 &= (flip_d9 >> 9) | 0x10000000u;
	flip_d9 &= ((flip_d9 & 0x10080000u) >> 18) | 0x10080000u;
	flipped |= (unsigned long long) (flip_d9 & -(flip_d9 & (unsigned int) (P >> 15))) << 24;

	return flipped;
}

/**
 * Compute flipped discs when playing on square G8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_G8(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d9;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x40404000u) >> 2) + ((HIDWORD(O) & 0x00404040u) >> 6)) * 0x08040201u) >> 24) + 2)
		& (((((LODWORD(P) & 0x40404040u) >> 2) + ((HIDWORD(P) & 0x00004040u) >> 6)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x001f8f8783818080ULL) & 0x0040404040404000ULL;

	outflank_h = OUTFLANK_7[(O >> 56) & 0x3e] & (P >> 55);
	flipped |= (unsigned long long) ((-outflank_h) & 0x3e) << 56;

	outflank_d9 = OUTFLANK_7[(((LODWORD(O) & 0x04020000u) + (HIDWORD(O) & 0x00201008u)) * 0x01010101u) >> 24]
		& ((((LODWORD(P) & 0x04020100u) + (HIDWORD(P) & 0x00001008u)) * 0x01010101u) >> 23);
	flipped |= (outflank_d9 * 0x001f0f0703010000ULL) & 0x0020100804020000ULL;

	return flipped;
}

/**
 * Compute flipped discs when playing on square H8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_H8(const unsigned long long P, const unsigned long long O)
{
	unsigned int outflank_h, outflank_v, outflank_d9;
	unsigned long long flipped;

	outflank_v = ((((((LODWORD(O) & 0x80808000u) >> 3) + ((HIDWORD(O) & 0x00808080u) >> 7)) * 0x08040201u) >> 24) + 2)
		& (((((LODWORD(P) & 0x80808080u) >> 3) + ((HIDWORD(P) & 0x00008080u) >> 7)) * 0x08040201u) >> 24);
	flipped = (outflank_v * 0x003f1f0f07030100ULL) & 0x0080808080808000ULL;

	outflank_h = OUTFLANK_7[(O >> 57) & 0x3f] & (P >> 56);
	flipped |= (unsigned long long) ((-outflank_h) & 0x3f) << 57;

	outflank_d9 = OUTFLANK_7[(((LODWORD(O) & 0x08040200u) + (HIDWORD(O) & 0x00402010u)) * 0x01010101u) >> 25]
		& ((((LODWORD(P) & 0x08040201u) + (HIDWORD(P) & 0x00002010u)) * 0x01010101u) >> 24);
	flipped |= (outflank_d9 * 0x007e3e1e0e060200ULL) & 0x0040201008040200ULL;

	return flipped;
}

/**
 * Compute (zero-) flipped discs when plassing.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
static unsigned long long flip_pass(const unsigned long long P, const unsigned long long O)
{
	(void) P; // useless code to shut-up compiler warning
	(void) O;
	return 0;
}


/** Array of functions to compute flipped discs */
unsigned long long (*GetRev[])(const unsigned long long, const unsigned long long) = {
	flip_A1, flip_B1, flip_C1, flip_D1,
	flip_E1, flip_F1, flip_G1, flip_H1,
	flip_A2, flip_B2, flip_C2, flip_D2,
	flip_E2, flip_F2, flip_G2, flip_H2,
	flip_A3, flip_B3, flip_C3, flip_D3,
	flip_E3, flip_F3, flip_G3, flip_H3,
	flip_A4, flip_B4, flip_C4, flip_D4,
	flip_E4, flip_F4, flip_G4, flip_H4,
	flip_A5, flip_B5, flip_C5, flip_D5,
	flip_E5, flip_F5, flip_G5, flip_H5,
	flip_A6, flip_B6, flip_C6, flip_D6,
	flip_E6, flip_F6, flip_G6, flip_H6,
	flip_A7, flip_B7, flip_C7, flip_D7,
	flip_E7, flip_F7, flip_G7, flip_H7,
	flip_A8, flip_B8, flip_C8, flip_D8,
	flip_E8, flip_F8, flip_G8, flip_H8,
	flip_pass, flip_pass
};